The ``add_integer`` function
============================

Using ``add_integer``
---------------------

First, import the function:
    >>> add_integer = __import__('0-add_integer').add_integer

Now, test with two positive integers:
    >>> add_integer(1, 2)
    3

Test with a positive and a negative integer:
    >>> add_integer(100, -2)
    98

Test with one argument (should use default value for b):
    >>> add_integer(2)
    100

Test with float and negative integer:
    >>> add_integer(100.3, -2)
    98

Test with two floats:
    >>> add_integer(2.5, 3.7)
    5

Test with negative float and positive integer:
    >>> add_integer(-98.5, 100)
    2

Test error cases:

Test with non-integer/float for a:
    >>> add_integer("School", 4)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test with non-integer/float for b:
    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer

Test with None as argument:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Test with no arguments:
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Test with float overflow:
    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Test with float NaN:
    >>> add_integer(float('nan'), 0)
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
